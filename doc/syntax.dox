/*! \page syntax Syntax
  \tableofcontents
  This page describes the syntax of TeGeL.
  \section overview File overview
  A .tgl file consists of a \ref header section and \ref body
  section. The sections are divided by the "%%" separator.
  \section header Header

  The header consists of a list of \ref record and \ref argument declarations.

  ~~~~~~~~~~~~~
  # Example record
  record book {
      string title;
      int year;
  }

  arg book[] books {
      default = [ book{"Book 1", 1997}, book{"Book 2", 2001} ];
      cmd = [ "b", "books=" ];
      info = "Book list";
  }

  # The body starts below
  %%
  ~~~~~~~~~~~~~


  \subsection record Record
  A record is declared using the following syntax
  ~~~~~~~~~~~~~
  record [name]  {
      [type] [field-name];
      ...
  }
  ~~~~~~~~~~~~~

  A record can only hold primitive values. Below is an example of a record
  declaration

  ~~~~~~~~~~~~~
  # Example record
  record book {
      string title;
      int year;
  }
  ~~~~~~~~~~~~~

  \subsection argument Argument
  An argument is declared using the following syntax
  ~~~~~~~~~~~~~
  arg [type] [name]  {
      [param-name] = [constant];
      ...
  }
  ~~~~~~~~~~~~~

  Where `param-name` can be any of the following

  Parameter     | Description
  ------------- | -------------
  default       | Default value for the argument
  cmd           | Command line parameters for the argument ("X" for short, "X=" for long)
  info          | Information string

  Below is an example of an argument declaration

  ~~~~~~~~~~~~~
  # Example argument
  arg book[] books {
      default = [ book{"Book 1", 1997}, book{"Book 2", 2001} ];
      cmd = [ "b", "books=" ];
      info = "Book list";
  }
  ~~~~~~~~~~~~~

  \section body Body

  \subsection for For loops

  \subsubsection foreach For Each loops

  For(each) loops that iterate over lists are defined using the following
  syntax

  ~~~
  % for [identifier] in [list-expression]
  [statements]
  % endfor
  ~~~

  For example

  ~~~
  % for b in books + [ book{"Book 3", 2009}, book{"Book 4", 2012 ]
  b.title
  % endfor
  ~~~

  Results in

  ~~~
  Book 1
  Book 2
  Book 3
  Book 4
  ~~~

  \subsubsection enumerated Enumerated For Each loops (TODO)


  ~~~
  % for [index-identifier], [value-identifier] in [list-expression]
  [statements]
  % endfor
  ~~~

  \subsubsection range For Range loops (TODO)

  ~~~
  % for [identifier] in range [lower-bound] to [higher-bound]
  [statements]
  % endfor
  ~~~

  \subsection conditional Conditional statements

  Conditional statements are defined using the following syntax

  ~~~
  % if [condition]
  [statements]
  % elif [condition]
  [statements]
  % else
  [statements]
  % endif
  ~~~

  \subsection text Text
  Every line where the first non-whitespace character isn't a "%" is treated as
  a raw text line. Everything on the line is seen as raw text except for the
  following:

  \subsubsection inline Inlining expressions
  Expressions can be inlined using the `{{ [expression] }}` syntax. If you need
  to add "{{" to a text line, this can easiest be done by escaping it

  ~~~
  {{ "{{" }}
  ~~~

  \subsubsection newline Suppressing newlines
  Newlines can be suppressed by adding `\\` to the end of a text line. For
  example

  ~~~
  Hello, \\
  World
  ~~~

  Generates "Hello, World".

  If you need to add "\\" to the end of a line, this can easiest be done by
  escaping it

  ~~~
  {{ "\\\\" }}
  ~~~

  \section expression Expressions

  \subsection string_concat String concatenation
  Two string expressions can be concatenated by using the `+` operand.

  ~~~
  "abc" + "def"
  ~~~

  Translates to

  ~~~
  "abcdef"
  ~~~



  \subsection string_repeat String repetition
  A string expression can be repeated by using the `*` operand with an integer
  expression

  ~~~
  "x" * 5
  ~~~

  Translates to

  ~~~
  "xxxxx"
  ~~~

  \subsection list_repeat List repetition
  A list expression can repeated by using the `*` operand with an integer
  expression

  ~~~
  [ 1, 2, 3 ] * 2
  ~~~

  Translates to

  ~~~
  [ 1, 2, 3, 1, 2, 3 ]
  ~~~

*/
