record function {
	string returns;
	string name;
	string parameters;
}

record author {
	string name;
	string mail;
}

arg author author {
	cmd = "--author";
	info = "Author information";
}

arg string version {
	cmd = "-v";
	info = "Program version";
}

arg string description {
	cmd = "-d";
	info = "File description";
}

arg function[] functions {
	cmd = "-f";
	info = "List of functions";
}

arg string[] includes {
	info = "Includes";
	cmd = "-i";
	default = [ "<stdlib.h>", "<stdio.h>" ];
}

arg bool main {
	info = "Generate main function?";
	cmd = "-m";
	default = true;
}

arg bool main_a {
	info = "Include main() arguments?";
	cmd = "-a";
	default = true;
}

%%
/**
 *
% if author.name
 % with string mail = author.mail.replace("@", " at ").replace(".", " dot ")
 * @author {{ author.name + (mail ? " <" + mail + ">" : "") }}
% endif
% if version
 * @version {{ version }}
% endif
 *
% if description
 * @section DESCRIPTION
 % for line in description.wrap(50)
 * {{ line }}
 % endfor
% endif
 */

% for i in includes
#include {{ i }}
% endfor

% for f in functions
% if f.name
/**
 * TODO
 *
% if f.returns != "void"
 * @return TODO
% endif
 */
% with string params = f.parameters ? f.parameters : "void"
{{ f.returns + " " + f.name + "(" + params + ")" }}
{

}
%endif
% endfor

% if main
int main({{ main_a ? "int argc, char **argv" : "void"}})
{
	return 0;
}
% endif
